# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps
name: CI manual

on:
  workflow_dispatch

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Save state
      run: echo "{name}={value}" >> $GITHUB_STATE
    - name: Set output
      run: echo "{name}={value}" >> $GITHUB_OUTPUT
    - name: checkout all the submodules
      uses: actions/checkout@v3
      with:
            submodules: recursive
    - name: Install .NET 8 SDK
      uses: actions/setup-dotnet@v3
      with:
           dotnet-version: 8.x.x
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    
    - name: Restore Nuget Packages
      run: dotnet restore Quest2-VRC.sln
    - name: Build Solution (Release)
      run: dotnet build Quest2-VRC.sln --configuration Release --no-restore 
    - name: Build Solution (Debug)
      run: dotnet build Quest2-VRC.sln --configuration Debug --no-restore 
    - name: Upload Artifact (Release)
      uses: actions/upload-artifact@v4
      with:
        name: Release
        path: Quest2-VRC.GUI\bin\Release\
        retention-days: 5
    - name: Upload Artifact (Debug)
      uses: actions/upload-artifact@v4
      with:
        name: Debug
        path: Quest2-VRC.GUI\bin\Debug\
        retention-days: 5
    - name: Upload Artifact (Debug Core DLL)
      uses: actions/upload-artifact@v4
      with:
        name: 'Debug Core DLL'
        path: Quest2-VRC.Core\bin\Debug\
        retention-days: 5   
    - name: Upload Artifact (Release Core DLL)
      uses: actions/upload-artifact@v4
      with:
        name: 'Release Core DLL'
        path: Quest2-VRC.Core\bin\Release\
        retention-days: 5   
          
